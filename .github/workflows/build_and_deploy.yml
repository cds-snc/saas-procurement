name: Docker build and push to staging

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }}
  AWS_ACCOUNT: 394954348146
  REGISTRY: 394954348146.dkr.ecr.ca-central-1.amazonaws.com/saas-procurement
  AWS_REGION: ca-central-1
  TF_VAR_sentinel_customer_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
  TF_VAR_sentinel_shared_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write
  security-events: write

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install SOCI
        working-directory: ./
        run: |
          wget https://github.com/awslabs/soci-snapshotter/releases/download/v0.3.0/soci-snapshotter-0.3.0-linux-amd64.tar.gz
          sudo tar -C /usr/local/bin -xvf soci-snapshotter-0.3.0-linux-amd64.tar.gz soci

      - name: Set up containerd
        run: |
          sudo wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz
          mkdir containerd
          sudo tar -zxf ./containerd-1.7.2-linux-amd64.tar.gz -C ./containerd
          sudo mv ./containerd/bin/* /usr/bin/
          sudo wget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64 -O /usr/bin/runc
          sudo chmod +x /usr/bin/runc

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT}}:role/gh_admin_role
          role-session-name: ECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current date and time
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H:%M:%S')"

      - name: Build image
        working-directory: ./saas_app
        run: |
          docker build \
           -t $REGISTRY:latest \
          --build-arg GIT_SHA=$GITHUB_SHA \
          --build-arg BUILD_DATE=${{ steps.date.outputs.date }} . 

      - name: Export image into CTR
        run: |
          docker save -o saas_app.tar $REGISTRY:latest
          sudo ctr i import saas_app.tar
          sudo ctr i tag $REGISTRY:latest $REGISTRY:$GITHUB_SHA

      - name: Run SOCI
        run: |
          sudo soci create $REGISTRY:latest
          sudo soci create $REGISTRY:$GITHUB_SHA

      - name: Push image to ECR
        run: |
          DOCKER_PASSWORD=$(aws ecr get-login-password --region ca-central-1)
          echo "::add-mask::$DOCKER_PASSWORD"
          sudo ctr i push --user AWS:$DOCKER_PASSWORD --platform linux/amd64 $REGISTRY:latest
          sudo ctr i push --user AWS:$DOCKER_PASSWORD --platform linux/amd64 $REGISTRY:$GITHUB_SHA

      - name: Push SOCI index
        run: |
          DOCKER_PASSWORD=$(aws ecr get-login-password --region ca-central-1)
          echo "::add-mask::$DOCKER_PASSWORD"
          sudo soci push --user AWS:$DOCKER_PASSWORD $REGISTRY:latest
          sudo soci push --user AWS:$DOCKER_PASSWORD $REGISTRY:$GITHUB_SHA

      - name: Restart ECS
        run: |
          aws ecs update-service --cluster saas-procurement-cluster --service saas-procurement-app-service --force-new-deployment > /dev/null 2>&1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@eecd7a02a0294b379411c126b61e5c29e253676a # v2.1.4
        with:
          docker_image: "${{ env.REGISTRY }}:latest"
          dockerfile_path: "saas_app/Dockerfile"
          platform: "linux/amd64"
          sbom_name: "saas_procurement"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
