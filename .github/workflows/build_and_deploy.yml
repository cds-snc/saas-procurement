name: Docker build and push to staging

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }}
  AWS_ACCOUNT: 394954348146 
  REGISTRY: 394954348146.dkr.ecr.ca-central-1.amazonaws.com/saas-procurement
  AWS_REGION: ca-central-1
  TF_VAR_sentinel_customer_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
  TF_VAR_sentinel_shared_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}
  TF_VAR_approved_request_template_id: ${{ secrets.APPROVED_REQUEST_TEMPLATE_ID }}
  TF_VAR_request_s32_approved_template_id: ${{ secrets.REQUEST_S32_APPROVED_TEMPLATE_ID }}
  TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
  TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
  TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
  TF_VAR_db_host: ${{ secrets.DB_HOST }}
  TF_VAR_environment: ${{ secrets.ENVIRONMENT }}
  TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
  TF_VAR_approver_delete_template_id: ${{ secrets.APPROVER_DELETE_TEMPLATE_ID }}
  TF_VAR_social_application_client_id: ${{ secrets.SOCIAL_APPLICATION_CLIENT_ID }}
  TF_VAR_saas_submission_template_id: ${{ secrets.SAAS_SUBMISSION_TEMPLATE_ID }}
  TF_VAR_edit_request_template_id: ${{ secrets.EDIT_REQUEST_TEMPLATE_ID }}
  TF_VAR_delete_saas_request_template_id: ${{ secrets.DELETE_SAAS_REQUEST_TEMPLATE_ID }}
  TF_VAR_saas_submission_edit_template_id: ${{ secrets.SAAS_SUBMISSION_EDIT_TEMPLATE_ID }}
  TF_VAR_denied_request_template_id: ${{ secrets.DENIED_REQUEST_TEMPLATE_ID }}
  TF_VAR_notify_api_key: ${{ secrets.NOTIFY_API_KEY }}
  TF_VAR_notify_url: ${{ secrets.NOTIFY_URL }}
  TF_VAR_approval_request_template_id: ${{ secrets.APPROVAL_REQUEST_TEMPLATE_ID }}
  TF_VAR_request_s32_denied_internal_ops_template_id: ${{ secrets.REQUEST_S32_DENIED_INTERNAL_OPS_TEMPLATE_ID }}
  TF_VAR_internal_ops_request_more_info_template_id: ${{ secrets.INTERNAL_OPS_REQUEST_MORE_INFO_TEMPLATE_ID }}
  TF_VAR_request_s32_denied_template_id: ${{ secrets.REQUEST_S32_DENIED_TEMPLATE_ID }}
  TF_VAR_s32_approval_requested_template_id: ${{ secrets.S32_APPROVAL_REQUESTED_TEMPLATE_ID }}
  TF_VAR_request_s32_approved_internal_ops_template_id: ${{ secrets.REQUEST_S32_APPROVED_INTERNAL_OPS_TEMPLATE_ID }}
  TF_VAR_requestor_s32approval_pending_review_template_id: ${{ secrets.REQUESTOR_S32APPROVAL_PENDING_REVIEW_TEMPLATE_ID }}
  TF_VAR_social_application_secret_key: ${{ secrets.SOCIAL_APPLICATION_SECRET_KEY }}
  TF_VAR_testing_feature_flag: ${{ secrets.TESTING_FEATURE_FLAG }}
  TF_VAR_site_id: ${{ secrets.SITE_ID }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write
  security-events: write


jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT}}:role/gh_admin_role
          role-session-name: ECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Build image
        working-directory: ./saas_app
        run: |
          docker build \
          --build-arg GIT_SHA=$GITHUB_SHA \
          -t $REGISTRY:$GITHUB_SHA \
          -t $REGISTRY:latest .

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: Push image to ECR
        run: |
          docker push $REGISTRY:$GITHUB_SHA
          docker push $REGISTRY:latest
          
      - name: Restart ECS
        run: |
          aws ecs update-service --cluster saas-procurement-cluster --service saas_procurement-service --force-new-deployment > /dev/null 2>&1

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@cfec0943e40dbb78cee115bbbe89dc17f07b7a0f # v2.1.3    
        with:
          docker_image: "${{ env.REGISTRY }}:latest"
          dockerfile_path: "saas_app/Dockerfile"
          platform: "linux/arm64"
          sbom_name: "saas_procurement"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
